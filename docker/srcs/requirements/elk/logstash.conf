input {
#  file {
#    #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
#    #default is TAIL which assumes more data will come into the file.
#    #change to mode => "read" if the file is a compelte file.  by default, the file will be removed once reading is complete -- backup your files if you need them.
#    mode => "tail"
#    path => "/usr/share/logstash/ingest_data/*"
#  }
 file {
    path => "/usr/share/logstash/ingest_data/*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
  }
 file {
    path => "/var/lib/docker/containers/*/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json {
      target => "docker"
    }
  }
}

filter {
  if [message] =~ /^\s*$/ {
    drop { }
  }
  if "nginx" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" =>  '^%{IP:ip} - - \[%{HTTPDATE}\] "%{WORD:method} %{DATA:request}" %{NUMBER:status} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:user-agent}"' }
    }
  }
  if "postgres" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" =>  ['%{DATESTAMP} %{TZ} \[%{POSINT:pid}\] %{WORD:log_level}:  %{GREEDYDATA:message}','%{GREEDYDATA:message}']}
    }
    # mutate {
    #   add_field => { "timestamp_temp" => "%{day}/%{month}/%{year} %{time}" }
    # }
    # date {
    #   match => ["timestamp_temp", "dd/MMM/yyyy HH:mm:ss"]
    #   target => "timestamp"
    # }
    # mutate {
    #   remove_field => ["timestamp_temp", "day", "month", "year", "time"]
    # }
  }
  if "backend" in [docker][attrs][tag] {
    if "stderr" in [docker][stream] {
      grok {
        match => { "[docker][log]" =>  '^\[%{MONTHDAY}/%{MONTH}/%{YEAR} %{TIME}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes}' }
      }
    }
    if "stdout" in [docker][stream] {
      grok {
        match => {"[docker][log]" =>  '^%{DATA:message}'}
      }
    }
  }
}

output {
  if "nginx" in [docker][attrs][tag] {
    elasticsearch {
      index => "nginx-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl => true
    }
  }
  if "postgres" in [docker][attrs][tag] {
    elasticsearch {
      index => "postgres-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl => true
    }
  }
  if "backend" in [docker][attrs][tag] {
    elasticsearch {
      index => "backend-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl => true
    }
  }
  else {
    elasticsearch {
      index => "elk-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts=> "${ELASTIC_HOSTS}"
      user=> "${ELASTIC_USER}"
      password=> "${ELASTIC_PASSWORD}"
      cacert=> "certs/ca/ca.crt"
      ssl => true
    }
  }
  # stdout { codec => rubydebug }
}

# output {
#  elasticsearch {
#     data_stream => false
#     index => "logstash-%{+YYYY.MM.dd}"
#     hosts=> "${ELASTIC_HOSTS}"
#     user=> "${ELASTIC_USER}"
#     password=> "${ELASTIC_PASSWORD}"
#     cacert=> "certs/ca/ca.crt"
#     ssl => true
#  }
# #  stdout { codec => rubydebug }
# }
