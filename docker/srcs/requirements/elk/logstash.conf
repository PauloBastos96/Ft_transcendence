input {
#  file {
#    #https://www.elastic.co/guide/en/logstash/current/plugins-inputs-file.html
#    #default is TAIL which assumes more data will come into the file.
#    #change to mode => "read" if the file is a compelte file.  by default, the file will be removed once reading is complete -- backup your files if you need them.
#    mode => "tail"
#    path => "/usr/share/logstash/ingest_data/*"
#  }
 file {
    path => "/usr/share/logstash/ingest_data/*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
  }
 file {
    path => "/var/lib/docker/containers/*/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json {
      target => "docker"
    }
  }
}

filter {
  # remove_field => ["docker.time", "day", "month", "year", "time"]
  if "nginx" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" =>  '^%{IP:ip} - - \[%{HTTPDATE}\] "%{WORD:verb} %{DATA:request}" %{NUMBER:status} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:user-agent}"' }
    }
  }
  # if "postgres" in [docker][attrs][tag] {
  #   grok {
  #     match => { "[docker][log]" =>  '^%{PGQUERY}|%{PGCONNECT}|%{PGDISCONNECT}|%{PGDURATION}|%{PGFATAL}|%{PGMESSAGE}' }
  #   }
  # }
  if "backend" in [docker][attrs][tag] {
    if "stderr" in [docker][stream] {
      grok {
        match => { "[docker][log]" =>  '^\[%{MONTHDAY}/%{MONTH}/%{YEAR} %{TIME}\] "%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes}' }
        # match => { "[docker][log]" =>  '^\[%{MONTHDAY:day}/%{MONTH:month}/%{YEAR:year} %{TIME:time}\] "%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes}' }
      }
    }
    if "stdout" in [docker][stream] {
      grok {
        match => {"[docker][log]" =>  '^%{DATA:message}'}
      }
    }
  }
  # if [docker][container] {
  #   mutate {
  #     add_field => { "container_id" => "%{[container][id]}" }
  #     add_field => { "container_name" => "%{[container][name]}" }
  #   }
  # }
}

# output {
#   if "nginx" in [tags] {
#     elasticsearch {
#       hosts => "https://es01:9200"
#       index => "nginx-logs-%{+YYYY.MM.dd}"
#       user => "${ELASTIC_USER}"
#       password => "${ELASTIC_PASSWORD}"
#       cacert => "certs/ca/ca.crt"
#       ssl => true
#     }
#   }
#   if "postgres" in [tags] {
#     elasticsearch {
#       hosts => "https://es01:9200"
#       index => "postgresql-logs-%{+YYYY.MM.dd}"
#       user => "${ELASTIC_USER}"
#       password => "${ELASTIC_PASSWORD}"
#       cacert => "certs/ca/ca.crt"
#       ssl => true
#     }
#   }
#   if "backend" in [tags] {
#     elasticsearch {
#       hosts => "https://es01:9200"
#       index => "backend-logs-%{+YYYY.MM.dd}"
#       user => "${ELASTIC_USER}"
#       password => "${ELASTIC_PASSWORD}"
#       cacert => "certs/ca/ca.crt"
#       ssl => true
#     }
#   }
#   else {
#     elasticsearch {
#       index => "logstash-%{+YYYY.MM.dd}"
#       data_stream => "true"
#       hosts=> "${ELASTIC_HOSTS}"
#       user=> "${ELASTIC_USER}"
#       password=> "${ELASTIC_PASSWORD}"
#       cacert=> "certs/ca/ca.crt"
#       ssl => true
#     }
#   }
#   stdout { codec => rubydebug }
# }

output {
 elasticsearch {
    data_stream => false
    index => "logstash-%{+YYYY.MM.dd}"
    hosts=> "${ELASTIC_HOSTS}"
    user=> "${ELASTIC_USER}"
    password=> "${ELASTIC_PASSWORD}"
    cacert=> "certs/ca/ca.crt"
    ssl => true
 }
}
