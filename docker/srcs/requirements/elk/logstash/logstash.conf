input {
 file {
    path => "/usr/share/logstash/ingest_data/*"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
  }
 file {
    path => "/var/lib/docker/containers/*/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json {
      target => "docker"
    }
  }
}

filter {
  if [message] =~ /^\s*$/ {
    drop { }
  }
  if [message] =~ /^\n$/ {
    drop { }
  }
  if "nginx" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" =>  [
        '%{IP:ip} - - \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{DATA:request}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:user-agent}"',
      '%{DATE} %{TIME} \[%{LOGLEVEL:loglevel}\] %{NUMBER:pid}#%{NUMBER:tid}: \*%{NUMBER:connection_id} %{GREEDYDATA:error_message}, client: %{IP:client_ip}, server: %{IP:server_ip}, request: "%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version}", host: "%{HOSTNAME:host}"',
      '%{DATE} %{TIME} \[%{LOGLEVEL:loglevel}\] %{NUMBER:pid}#%{NUMBER:tid}: \*%{NUMBER:connection} %{WORD:action}\(\) \"%{DATA:filename}\" %{WORD:status} \(%{GREEDYDATA:error_message}\), client: %{IP:client_ip}, server: %{DATA:server}, request: \"%{GREEDYDATA:request}", host: \"%{HOSTNAME:host}\"',
      '%{IP:client_ip} - %{USERNAME:user} \[%{HTTPDATE:timestamp}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:status_code} %{NUMBER:bytes} "-" "%{DATA:user_agent}" ?"-"',
      '%{GREEDYDATA:message}'
      ] }
    }
  }
  if "postgres" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" =>  ['%{DATESTAMP} %{TZ} \[%{POSINT:pid}\] %{LOGLEVEL:log_level}:  %{GREEDYDATA:message}', '%{TIMESTAMP_ISO8601} %{WORD} \[%{NUMBER:pid}\] %{LOGLEVEL:log_level}:  %{GREEDYDATA:message}','%{GREEDYDATA:message}']}
    }
  }
  if "backend" in [docker][attrs][tag] {
      grok {
        match => { "[docker][log]" =>  ['\[%{MONTHDAY}/%{MONTH}/%{YEAR} %{TIME}\] "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:http_version}" %{NUMBER:response} %{NUMBER:bytes}', '%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME} \[%{LOGLEVEL:loglevel}\] %{NUMBER:pid}#%{NUMBER:tid}: %{GREEDYDATA:message}', '%{TIMESTAMP_ISO8601:timestamp} %{DATA:source} %{LOGLEVEL:loglevel} +%{GREEDYDATA:message}', '%{GREEDYDATA:message}'] }
      }
  }
  if "logstash" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" => ['\[%{TIMESTAMP_ISO8601}\]\[%{LOGLEVEL:loglevel} \]\[%{DATA:component}\]\[%{DATA:thread}\] %{GREEDYDATA:message} \{:name=>"<%{DATA:alias_name}>"\}', '%{GREEDYDATA:message}']}
    }
  }
  if "kibana" in [docker][attrs][tag] {
    grok {
      match => { "[docker][log]" => ['\[%{TIMESTAMP_ISO8601}\]\[%{LOGLEVEL:loglevel} \]\[%{DATA:component}\] %{GREEDYDATA:message}', '^%{GREEDYDATA:message}']}
    }
  }
  if "es01" in [docker][attrs][tag] {
    if [message] =~ "\A\{.+\}\z" {
      json {
        source => "[docker][log]"
        target => "elasticsearch"
        add_tag => [ "parsed_json" ]
      }
    }
    else {
      grok {
        match => { "[docker][log]" => ['^%{GREEDYDATA:message}']}
      }
    }
  }
}

output {
  if "nginx" in [docker][attrs][tag] {
    elasticsearch {
      index => "nginx-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "nginx"
    }
  }
  if "postgres" in [docker][attrs][tag] {
    elasticsearch {
      index => "postgres-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "postgres"
    }
  }
  if "backend" in [docker][attrs][tag] {
    elasticsearch {
      index => "backend-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "backend"
    }
  }

  if "es01" in [docker][attrs][tag] {
    elasticsearch {
      index => "es01-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "es01"
    }
  }

  if "kibana" in [docker][attrs][tag] {
    elasticsearch {
      index => "kibana-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "kibana"
    }
  }

  if "logstash" in [docker][attrs][tag] {
    elasticsearch {
      index => "logstash-%{+YYYY.MM.dd}"
      data_stream => "false"
      hosts => "${ELASTIC_HOSTS}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      cacert => "certs/ca/ca.crt"
      ssl_enabled => true
      template_name => "template"
      ilm_enabled => true
      ilm_policy => "logs_policy"
      ilm_rollover_alias => "logstash"
    }
  }
}
